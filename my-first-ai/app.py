from flask import Flask, request, jsonify
import tensorflow as tf
import numpy as np
import logging
import time

app = Flask(__name__)

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("SignLanguageAPI")

# ÏÉÅÌÉú Í¥ÄÎ¶¨ Ï¥àÍ∏∞Ìôî
accumulated_text = ""
last_label = None
label_start_time = time.time()
model = None  # ÏßÄÏó∞ Î°úÎî©ÏùÑ ÏúÑÌï¥ NoneÏúºÎ°ú Ï¥àÍ∏∞Ìôî

def load_model():
    """Î™®Îç∏ ÏßÄÏó∞ Î°úÎî© Ìï®Ïàò"""
    global model
    if model is None:
        try:
            model = tf.keras.models.load_model('model.h5')
            # Î™®Îç∏Ïù¥ Ïª¥ÌååÏùºÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÏàòÎèô Ïª¥ÌååÏùº
            if not model._is_compiled:
                model.compile(optimizer='adam', loss='categorical_crossentropy')
            logger.info("‚úÖ Model loaded and compiled successfully")
        except Exception as e:
            logger.error(f"‚ùå Model loading failed: {e}")
            raise RuntimeError(f"Model loading failed: {e}")
    return model

@app.route('/')
def health_check():
    """Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏"""
    return jsonify({
        "status": "active",
        "model_loaded": model is not None,
        "accumulated_text": accumulated_text
    }), 200

@app.route('/predict', methods=['POST'])
def predict():
    """ÏòàÏ∏° ÏöîÏ≤≠ Ï≤òÎ¶¨"""
    global accumulated_text, last_label, label_start_time

    # 1. ÏßÄÏó∞ Î™®Îç∏ Î°úÎî©
    model = load_model()
    
    # 2. ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù
    data = request.get_json()
    if not data:
        logger.warning("‚ö†Ô∏è Empty request received")
        return jsonify({"error": "Request body is empty"}), 400
        
    # 3. Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ (START/STOP)
    if 'command' in data:
        command = data['command'].upper()
        if command == "START":
            accumulated_text = ""
            last_label = None
            label_start_time = time.time()
            logger.info("üîÑ START: Text buffer reset")
            return jsonify({"status": "started", "accumulated_text": accumulated_text})
            
        elif command == "STOP":
            result = accumulated_text
            accumulated_text = ""
            logger.info(f"‚èπÔ∏è STOP: Returned text: '{result}'")
            return jsonify({"result": result, "status": "stopped"})
    
    # 4. Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù
    if 'data' not in data or not isinstance(data['data'], list):
        logger.warning("‚ö†Ô∏è Invalid data format")
        return jsonify({"error": "Missing or invalid 'data' field"}), 400
        
    # 5. ÏòàÏ∏° ÏàòÌñâ
    try:
        input_data = np.array(data['data']).reshape(1, -1)
        prediction = model.predict(input_data)
        class_id = np.argmax(prediction)
        confidence = float(prediction[0][class_id])
        current_label = data.get('label', str(class_id))
        
        # 6. ÎùºÎ≤® ÌïÑÌÑ∞ÎßÅ (DEFAULT Ï†úÏô∏)
        EXCLUDED_LABELS = {"START", "STOP", "DEFAULT"}
        if current_label in EXCLUDED_LABELS:
            logger.info(f"üö´ Skipped excluded label: {current_label}")
            return jsonify({
                "status": "excluded",
                "current_label": current_label
            })
        
        # 7. ÌÖçÏä§Ìä∏ ÎàÑÏ†Å Î°úÏßÅ
        current_time = time.time()
        if confidence > 0.6 and current_label.isalpha():
            # ÎùºÎ≤® Î≥ÄÍ≤Ω Í∞êÏßÄ
            if last_label != current_label:
                last_label = current_label
                label_start_time = current_time
                logger.info(f"üîÑ Label changed to: {current_label}")
            
            # 2Ï¥à Ïù¥ÏÉÅ ÎèôÏùº ÎùºÎ≤® Ïú†ÏßÄ Ïãú ÎàÑÏ†Å
            elif current_time - label_start_time >= 2.0:
                accumulated_text += current_label
                label_start_time = current_time
                logger.info(f"‚úçÔ∏è Accumulated: '{current_label}' ‚Üí Full text: '{accumulated_text}'")
        
        return jsonify({
            "status": "success",
            "current_label": current_label,
            "confidence": confidence,
            "accumulated_text": accumulated_text
        })
        
    except Exception as e:
        logger.exception(f"üî• Prediction failed: {e}")
        return jsonify({"error": "Prediction processing failed"}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
